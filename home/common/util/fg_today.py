# Using this file to pull helper functions for the today forecast generator that will
# live in the Wavare app.


import datetime as dt
from datetime import datetime

from unidecode import unidecode

from fg_shared import generate_json, generate_height_list
from fg_hourly import generate_time_list

# Night = 0:00-5:00
# Morning = 5:00-12:00
# Afternoon = 12:00-5:00
# Evening = 5:00-10:00
# Night = 10:-11:59

# Night = 7 hours
# Morning = 7 hours
# Afternoon = 5 hours
# Evening = 5 hours


def get_time_of_day():
    time_list, night, morning, afternoon, evening = [], [], [], [], []
    base = datetime.combine(dt.date.today(), datetime.min.time())
    starting_time = (base + dt.timedelta(hours=5))
    datetime_list = [starting_time + dt.timedelta(hours=x) for x in range(24)]
    for date in datetime_list:
        time_list.append(date.strftime("%Y-%m-%dT%H:%M:%SZ"))
    # I can probably clean up this loop
    # If statement was messier
    for x in range(7):
        morning.append(time_list[x])
    for x in range(5):
        afternoon.append(time_list[x+7])
    for x in range(5):
        evening.append(time_list[x+12])
    for x in range(7):
        night.append(time_list[x+17])
    return morning, afternoon, evening, night

def get_average_height():
    height_list = generate_height_list(24)
    for x in range(7):
        morning_height += height_list[x]
    for x in range(5):
        afternoon_height += height_list[x+7]
    for x in range(5):
        evening_height += height_list[x+12]
    for x in range(7):
        night_height += height_list[x+17]
    
    return morning_height, afternoon_height, evening_height, night_height


def generate_todays_forecast(location):
    morning, afternoon, evening, night = get_time_of_day()
    height_list = generate_height_list(24)
    keys = ["date", "max_wave_height"]
    values = ['', '']
    data = []
    average_height_list = []

    # Why don't we turn each entry into a dict first? Maybe:

    # for dates in time_list:
    #     i = time_list.index(dates)
    #     values[0] = time_list[i]
    #     values[1] = height_list[i]
    #     pre_data = dict(zip(keys, values))
    #     data.append(pre_data)

    # That worked :)

    generate_json(location, 'today', data)


# I should work with the data generated by the hourly forecast within the
# app to generate the time of day forecast